LIBRARY ieee ;
USE ieee.std_logic_1164.all ;

ENTITY Lab_05 IS
	GENERIC ( N : INTEGER := 8 ) ;
	PORT (	clock 	: IN 	STD_LOGIC ;
				Reset, X1, X0	: IN STD_LOGIC := '0';
				Done, LA, EA, low  : BUFFER STD_LOGIC := '0';
				A,Inp,Data : BUFFER STD_LOGIC_VECTOR(N-1 DOWNTO 0);
init : buffer INTEGER;
				B : out STD_LOGIC_VECTOR(3 DOWNTO 0);
				com : out STD_LOGIC_VECTOR(N-1 DOWNTO 0);
				a1, b1, c1, d1, e1, f1, g1,rX1,rX0,cclock,cmclock,instt : Out STD_LOGIC);
END Lab_05;
ARCHITECTURE behavior OF Lab_05 IS
	component ShiftA IS
	GENERIC ( N : INTEGER := 8 ) ;
	PORT (	D : IN STD_LOGIC_VECTOR(N-1 DOWNTO 0) ;
				Load	: IN 	STD_LOGIC ;
				Enable	: IN 	STD_LOGIC ;
				Sin 	: IN 	STD_LOGIC ;
				Clock 	: IN 	STD_LOGIC ;
				Q 	: BUFFER STD_LOGIC_VECTOR(N-1 DOWNTO 0) ) ;
	END component ;

TYPE state IS (S0, S1, S2, S3);
TYPE fstate IS (I0, I1,I2);
TYPE Cstate IS (CS0, CS1, CS2, CS3);
SIGNAL BCstate: state;
SIGNAL Input_state: fstate;
SIGNAL Clock_state: Cstate;
SIGNAL C,R,E  : INTEGER := 0;
SIGNAL init : INTEGER := 0;
SIGNAL  IClock : STD_LOGIC := '0';
BEGIN

SH2:ShiftA GENERIC MAP ( N => 8 )
			  PORT MAP ( D => Data, 
							 Load => LA, 
							 Enable => EA, 
							 Sin => low, 
							 Clock =>clock, 
							 Q => A ) ; -- A == Q
							 
							 
							
	IPST: PROCESS(IClock, reset)
	BEGIN
	if(Reset = '1')THEN
		Input_state <= I0;
		Data <= "00000000";
		
ELSIF(IClock = '1' AND IClock'event)THEN
			CASE Input_state IS
				WHEN I0 =>
					IF(X1 = '1' AND X0 = '0')THEN
						Inp(E) <= '1';
					ELSIF(X0 = '1' AND X1 = '0')THEN
						Inp(E) <= '0';
					END IF;
          					IF(E = 7)THEN
					Input_state <= I1;
					END IF;
				WHEN I1 =>
				Data <= Inp;
				Input_state <= I2;
				WHEN I2 =>
				IF(Reset = '1')THEN
				inp <= "00000000";
				Input_state <= I0;
				ELSE
				Input_state <= I2;
				END IF;
			END CASE;
		END IF;
	END process;
					
	C_state: PROCESS(clock,reset)
  BEGIN
	if(Reset = '1')THEN
		Clock_state<= CS0;
		E <= 0;
		ELSIF(clock = '1' AND clock'event )THEN
			CASE Clock_state IS
				WHEN CS0 =>
					Clock_state <= CS1;
				WHEN CS1 =>
					if(X1 = '1')THEN
					Clock_state <= CS2;
					ELSIF(X0 = '1')THEN
					Clock_state <= CS2;
					ELSE
					Clock_state <= CS1;
					END IF;
				WHEN CS2 =>
				   if(X1 = '1' AND X0 = '0')THEN
					Clock_state <= CS3;
					ELSIF(X0 = '1' AND X1 = '0')THEN
					Clock_state <= CS3;
					ELSE
					CLock_state <= CS2;
					END IF;
          WHEN CS3 =>
					if(X1 = '1')THEN
					Clock_state <= CS3;
					ELSIF(X0 = '1')THEN
					Clock_state <= CS3;
					ELSE
					E <= E+1;
					Clock_state <= CS0;
					END IF;
			END CASE;
	END IF;
	END PROCESS;
	cmclock <= '1' WHEN BCstate = S2 ELSE '0';
					  
OneCount: PROCESS(Reset,clock)
	BEGIN	
		IF(Reset = '1')THEN
			BCstate <= S0;
			C <= 0;
		ELSIF rising_edge(clock)THEN
			CASE BCstate IS
          WHEN S0 =>
				IF(Input_state = I1)THEN
				LA <= '1';
				BCstate <= S1;
				ELSE
				BCstate <= S0;
				END IF;
				WHEN S1 =>
				IF(Input_state = I2)THEN
				LA <= '0';
				low <= '1';
				EA <= '1';
				BCstate <= S2;
				END IF;
				WHEN S2 =>
				C <= C + 1;
				IF(A(0) = '1')THEN
				R <= R + 1;
				END IF;
				if(C = 7)THEN
				BCstate <= S3;
				END IF;
				WHEN S3 =>
        if(Reset = '1')THEN
				low <= '0';
				EA <= '0';
				R <= 0;
				BCstate <= S0;
				ELSE
				BCstate <= S3;
				END IF;
			END CASE;
		END IF;
	END PROCESS;
	IClock <= '1' WHEN Clock_state = CS2 OR E = 8 ELSE '0';
	Done <= '1' WHEN BCstate = S3 ELSE '0';
	
	OI : PROCESS(Done,Reset)
	BEGIN
	if(Reset = '1')THEN
	com <= "11111111";
	a1 <= '0';b1 <= '0'; c1<='0';d1<='0';e1<='0';f1<='0';g1<='0';
  ELSIF(Done = '1')THEN
	com <= "01111111";
			IF(R = 0)THEN
			init <= R;
			a1 <= '1';b1 <= '1'; c1<='1';d1<='1';e1<='1';f1<='1';g1<='0';
			ELSIF(R = 1)THEN
			init <= R;
			a1 <= '0';b1<='1';c1<='1';d1<='0';e1<='0';f1<='0';g1<='0';
			ELSIF(R = 2)THEN
			init <= R;
			a1<='1';b1<='1';g1<='1';e1<='1';d1<='1';c1<='0';f1<='0';
			ELSIF(R = 3)THEN
			init <= R;
      a1<='1';b1<='1';c1<='1';d1<='1';g1<='1';e1<='0';f1<='0';
			ELSIF(R = 4)THEN
			init <= R;
			a1<='0';b1<='1';c1<='1';d1<='0';e1<='0';f1<='1';g1<='1';
			ELSIF(R = 5)THEN
			init <= R;
			a1<='1';b1<='0';c1<='1';d1<='1';e1<='0';f1<='1';g1<='1';
			ELSIF(R = 6)THEN
			init <= R;
			a1<='0';b1<='0';c1<='1';d1<='1';e1<='1';f1<='1';g1<='1';
			ELSIF(R = 7)THEN
			init <= R;
			a1<='1';b1<='1';c1<='1';d1<='0';e1<='0';f1<='1';g1<='0';
			ELSIF(R = 8)THEN
			init <= R;
			a1<='1';b1<='1';c1<='1';d1<='1';e1<='1';f1<='1';g1<='1';
			ELSE
			a1 <= '0';b1 <= '0'; c1<='0';d1<='0';e1<='0';f1<='0';g1<='0';
			END IF;
		END IF;
	END PROCESS;
/************************************************************************************************************************/
// shift register
LIBRARY ieee ;
USE ieee.std_logic_1164.all ;

ENTITY ShiftA IS
	GENERIC ( N : INTEGER := 8 ) ;
	PORT (	D : IN STD_LOGIC_VECTOR(N-1 DOWNTO 0) ;
			   Load	: IN 	STD_LOGIC ;
			   Enable	: IN 	STD_LOGIC ;
			   Sin 	: IN 	STD_LOGIC ;
			   Clock 	: IN 	STD_LOGIC ;
			   Q 	: BUFFER STD_LOGIC_VECTOR(N-1 DOWNTO 0) ) ;
END ShiftA ;

ARCHITECTURE Behavior OF ShiftA IS	
BEGIN
	PROCESS (Clock)
	BEGIN
  IF (Clock'EVENT AND Clock = '1' ) THEN
			IF (Load = '1') THEN
				Q <= D ;
			ELSIF (Enable = '1') THEN
				Genbits: FOR i IN 0 TO N-2 LOOP
					Q(i) <= Q(i+1);
				END LOOP ;
				Q(N-1) <= Sin ;
			END IF;
		END IF ;
	END PROCESS ;
END Behavior ;
